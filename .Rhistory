sigRSqNumTest <- rsq(AutoNumTest$mpg_hat_sig, AutoNumTest$mpg)
# This did not improve the performance, and lowered it slightly from .69 to .59.  This makes some sense
# because even though the other variables were not significant, having more less significant variables is
# likely to  still increase the R-Squared value.
# 9. Attempt to fit a model on all of the relevant independent variables (including carName).
# Then calculate the R**2 on a test set. You will likely encounter an error.
# Explain why this error occurs. Fix this error.
allXVars <- names(newAutoData)
allFormula <- createModelFormula(targetVar = targetVar, allXVars)
allModel <- lm(allFormula, AutoTrain)
AutoTest[,targetVarHat] <- predict(allModel, AutoTest)
# The error occurs because lm() treats the model name as a factor variable. Since this is
# a unique string for nearly every entry, R will be confused when it finds factors in the test
# set different from the factors in the training set.
# Remove model name from the formula specification
allXVars <- c(names(AutoCatTrain), names(AutoNumTrain[1:6]))
allFormula <- createModelFormula(targetVar, allXVars)
allModel <- lm(allFormula, AutoTrain)
AutoTest$targetVarHat <- predict(allModel, AutoTest)
allRSq <- rsq(AutoTest$mpg, AutoTest$mpg_hat)
# 10. Determine the relationship between model year and mpg.
# Interpret this relationship.
# Theorize why this relationship might occur.
# There is a positive relationship between Year and MPG. The coefficient on year is 0.736 implying that
# MPG goes up about .736 miles per gallon from one year to the next, all else being equal.
#
# This makes sense based on some observations from the exploratory analysis.  There are fewer high cylinder,
# heavy vehicles in the later years of the sample. This could be an indication that the sample is biased, and
# large vehicles were not chosen evenly - weight is statistically significant so more heavy vehicles in a particular
# year would impact the results. If the sampling was done in an unbiased way it could also indicate that more
# people were driving low MPG cars each year. It could also indicate that the MPG technology was improving.
# 11. Build the best linear model you can (as measured by R**2 on the test data)
# Record the value obtained in the comments below. Make sure to show all your code.
xVars <- c('year', 'origin', 'displacement','horsepower', 'weight')
form1 <- createModelFormula(targetVar, xVars)
model1 <- lm(form1, AutoTrain)
summary(model1)
AutoTest$'mpg_hat1' <- predict(model1,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat1)
# Try removing horsepower.
xVars <- xVars[xVars!='horsepower']
form2 <- createModelFormula(targetVar, xVars)
model2 <- lm(form2, AutoTrain)
summary(model2)
AutoTest$'mpg_hat2' <- predict(model2,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat2)
# Displacement becomes insignificant. Try removing it.
xVars <- xVars[xVars!='displacement']
form3 <- createModelFormula(targetVar, xVars)
model3 <- lm(form3, AutoTrain)
summary(model3)
AutoTest$'mpg_hat3' <- predict(model3,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat3)
AutoTrain[is.na(AutoTrain$horsepower),]$horsepower <- mean(newAutoData$horsepower, na.rm = TRUE)
AutoTest[is.na(AutoTest$horsepower),]$horsepower <- mean(newAutoData$horsepower, na.rm = TRUE)
xVars <- c('year', 'origin', 'displacement','horsepower', 'weight')
form4 <- createModelFormula(targetVar, xVars)
model4 <- lm(form4, AutoTrain)
summary(model4)
AutoTest$'mpg_hat4' <- predict(model4,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat4)
summary(model4)
summary(model1)
summary(model1)
summary(model4)
xVars <- c('year', 'origin', 'displacement','horsepower', 'weight')
form1 <- createModelFormula(targetVar, xVars)
model1 <- lm(form1, AutoTrain)
summary(model1)
AutoTest$'mpg_hat1' <- predict(model1,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat1)
xVars <- xVars[xVars!='horsepower']
form2 <- createModelFormula(targetVar, xVars)
model2 <- lm(form2, AutoTrain)
summary(model2)
AutoTest$'mpg_hat2' <- predict(model2,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat2)
xVars <- xVars[xVars!='displacement']
form3 <- createModelFormula(targetVar, xVars)
model3 <- lm(form3, AutoTrain)
summary(model3)
rsq(AutoTest$mpg,AutoTest$mpg_hat3)
xVars <- c('year', 'origin', 'displacement','horsepower', 'weight')
model4 <- lm(form4, AutoTrain)
summary(model4)
AutoTest$'mpg_hat4' <- predict(model4,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat4)
rsq(AutoTest$mpg,AutoTest$mpg_hat3)
ggplot(newAutoData) + geom_point(aes(x=year, y = horsepower), position = "jitter")
# CSP571
# Homework 3
# 1.Load in the auto mpg data set: https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data
AutoData <- read.table('https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data')
names(AutoData) <- c('mpg','cylinders','displacement','horsepower','weight','acceleration','year','origin','model')
# 2. Identify all of the categorical variables, all of the numeric variables
# and all of the binary variables.
# I included cylinders as numeric even though it only takes on one of 5 discrete values - number of cylinders
# is still a meaningful numerical amount.
numericVars <- data.frame(AutoData$mpg, AutoData$displacement,
AutoData$horsepower,AutoData$weight,
AutoData$acceleration, AutoData$cylinders)
# Horsepower was coded as a factor, so I converted it by way of Factor -> character -> numeric since converting
# directly to numeric just gave level numbers.
numericVars$AutoData.horsepower <- sapply(sapply(numericVars$AutoData.horsepower, as.character),as.numeric)
names(numericVars) <- c('mpg', 'displacement', 'horsepower', 'weight', 'acceleration', 'cylinders')
categoricalVars <- data.frame(AutoData$year, AutoData$origin)
names(categoricalVars) <- c('year', 'origin')
# There are no variables that take on two values (origin takes on 3) - so there are no binary variables.
# Name can take on any value, so it can not be categorical.
# 3. Identify the appropriate descriptive statistics and graph for this data set.
# Execute on those and use the comments to discuss relevant relationships or insights discovered.
# The model variable should not be a factor since all values are unique
m <- sapply(AutoData$model, as.character)
AutoData$model <- m
# The data with appropriate types is stored in newAutoData
newAutoData <- data.frame(c(categoricalVars, numericVars))
newAutoData$model <- AutoData$model
summary(newAutoData)
# Boxplot all the numeric variables
for (i in 1:ncol(numericVars)) {
title <- paste(colnames(numericVars)[i], "-boxplot.pdf", sep="")
pdf(title)
boxplot(numericVars[,i])
dev.off()
}
# The boxplots show that there are no outliers in displacement and weight, and only one in mpg.
# Horsepower only has outliers on the positive end which is intuitive since a high (relative to the mean)
# horsepower vehicle is more likely than one with extremely low horsepower.  Acceleration also contains
# a few outliers but evenly spread on the high and low end. Also, the median, first, and third quartiles
# are relatively evenly spread indicating that acceleration may have high variance and lower skew.
# Looking further into horsepower and acceleration's density.
pdf('horsepower_density.pdf')
ggplot(newAutoData) + geom_density(aes(x=horsepower))
dev.off()
pdf('acceleration_density.pdf')
ggplot(newAutoData) + geom_density(aes(x=acceleration))
dev.off()
ggplot(newAutoData) + geom_bar(aes(x=origin))
# The summary stats don't show amounts for each category since the values were kept as integers, so
# I graphed them into bar charts.
ggplot(categoricalVars) + geom_bar(aes(x=year))
ggplot(categoricalVars) + geom_bar(aes(x=cylinders))
ggplot(categoricalVars) + geom_bar(aes(x=origin))
# Origin - a majority of origins are set to 1.
# Cylinders - almost all are 4, 6, or 8 which makes sense. Few are set to 3 or 5. On suspicion that this was an
# error I searched to confirm there really are odd cylindered vehicles.
# Year - All the cars are between year 1970 and 1982 and the distribution by year seems pretty even. Each
# year has between 25 and 40 observations in it.
# Relationships
# A negative relationship between horsepower and MPG, or cylinders and MPG should be suspected. The scatterplots
# seem to suggest this as well.
ggplot(newAutoData) + geom_point(aes(x=horsepower, y = mpg))
ggplot(newAutoData) + geom_point(aes(x=cylinders, y = mpg))
# A scatterplot also suggests some advancement in MPG efficiency in the 70s. Or perhaps the sample just chose
# more sedans in the late 70s and trucks from the early 70s?
ggplot(newAutoData) + geom_point(aes(x=year, y = mpg))
# It does appear that more low cylinder vehicles were chosen for the later 70s.
ggplot(newAutoData) + geom_point(aes(x=year, y = cylinders), position = "jitter")
# Similarly, although the lower end of horsepower didn't change much, more high horsepower vehicles
# were chosen from the early 70s.
ggplot(newAutoData) + geom_point(aes(x=year, y = horsepower), position = "jitter")
# 4. Create a correlation matrix for all of the numeric variables.
library(corrplot)
corrMatrix <- cor(numericVars, use="complete")
pdf('correlation-matrix.pdf')
corrplot(corrMatrix)
dev.off()
# 5. Identify the columns (if any) with missing data.
# 1.5% of the entries in Horsepower are NA, no other data is explicitly missing. It doesn't appear
# that there are other missing or abnormal values judging from the summary above.
naPercent <- sapply(newAutoData, function(x) length(which(is.na(x)))/length(x)*100)
# 6. Divide the data into a train/test set (80% and 20% respectively) using stratified sampling
trainPct = .8
testPct = 1-trainPct
library('caret')
inTrain <- createDataPartition(y = newAutoData$mpg, p = trainPct, list = FALSE)
AutoTrain <- newAutoData[inTrain,]
AutoTest <- newAutoData[-inTrain,]
AutoNumTrain <- numericVars[inTrain,]
AutoNumTest <- numericVars[-inTrain,]
AutoCatTrain <- categoricalVars[inTrain,]
AutoCatTest <- categoricalVars[-inTrain,]
stopifnot((nrow(AutoTrain)+nrow(AutoTest)) == nrow(newAutoData))
# 7. Fit a linear model to the data using the numeric variables only. Calculate the R**2 on the test set.
xVars <- c('displacement', 'horsepower', 'weight', 'acceleration','cylinders')
targetVar <- 'mpg'
createModelFormula <- function(targetVar, xVars, includeIntercept = TRUE){
if(includeIntercept){
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ ')))
} else {
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ '), -1))
}
return(modelForm)
}
numModelFormula <- createModelFormula(targetVar, xVars)
numModel <- lm(numModelFormula, data = AutoNumTrain)
targetVarHat <- paste0(targetVar, "_hat")
AutoNumTest[,targetVarHat] <- predict(numModel, AutoNumTest)
AutoNumTrain[,targetVarHat] <- predict(numModel, AutoNumTrain)
rsq <- function(y, yHat) {
residuals <- y - yHat
ssr <- sum((y-yHat)^2)
sst <- sum((y-mean(y))^2)
return(1 - (ssr/sst))
}
rSqNumTest <- rsq(AutoNumTest$mpg, AutoNumTest$mpg_hat)
rSqNumTrain <- rsq(AutoNumTrain$mpg, AutoNumTrain$mpg_hat)
# 8. Programmatically identify and remove the non-significant variables (alpha = .05). Fit a new model with those variables removed.
# Calculate the R**2 on the test set with the new model. Did this improve performance?
summNumModel <- coef(summary(numModel))
pVal <- summNumModel[,4]
sigNumVars <- c()
# Starts at 3 so the intercept is not included
for (i in 3:ncol(summNumModel)) {
name = names(pVal[i])
if(as.numeric(pVal[i]) < .05) {
sigNumVars[i] <- name
}
}
sigNumVars <- sigVars[!is.na(sigVars)]
sigModelFormula <- createModelFormula(targetVar, sigNumVars)
sigNumModel <- lm(sigModelFormula, data = AutoNumTrain)
targetVarHatSig <- paste0(targetVar, "_hat_sig")
AutoNumTest[,targetVarHatSig] <- predict(sigNumModel, AutoNumTest)
sigRSqNumTest <- rsq(AutoNumTest$mpg_hat_sig, AutoNumTest$mpg)
# This did not improve the performance, and lowered it slightly from .69 to .59.  This makes some sense
# because even though the other variables were not significant, having more less significant variables is
# likely to  still increase the R-Squared value.
# 9. Attempt to fit a model on all of the relevant independent variables (including carName).
# Then calculate the R**2 on a test set. You will likely encounter an error.
# Explain why this error occurs. Fix this error.
allXVars <- names(newAutoData)
allFormula <- createModelFormula(targetVar = targetVar, allXVars)
allModel <- lm(allFormula, AutoTrain)
AutoTest[,targetVarHat] <- predict(allModel, AutoTest)
# The error occurs because lm() treats the model name as a factor variable. Since this is
# a unique string for nearly every entry, R will be confused when it finds factors in the test
# set different from the factors in the training set.
# Remove model name from the formula specification
allXVars <- c(names(AutoCatTrain), names(AutoNumTrain[1:6]))
allFormula <- createModelFormula(targetVar, allXVars)
allModel <- lm(allFormula, AutoTrain)
AutoTest$targetVarHat <- predict(allModel, AutoTest)
allRSq <- rsq(AutoTest$mpg, AutoTest$mpg_hat)
# 10. Determine the relationship between model year and mpg.
# Interpret this relationship.
# Theorize why this relationship might occur.
# There is a positive relationship between Year and MPG. The coefficient on year is 0.736 implying that
# MPG goes up about .736 miles per gallon from one year to the next, all else being equal.
#
# This makes sense based on some observations from the exploratory analysis.  There are fewer high cylinder,
# heavy vehicles in the later years of the sample. This could be an indication that the sample is biased, and
# large vehicles were not chosen evenly - weight is statistically significant so more heavy vehicles in a particular
# year would impact the results. If the sampling was done in an unbiased way it could also indicate that more
# people were driving low MPG cars each year. It could also indicate that the MPG technology was improving.
# 11. Build the best linear model you can (as measured by R**2 on the test data)
# Record the value obtained in the comments below. Make sure to show all your code.
xVars <- c('year', 'origin', 'displacement','horsepower', 'weight')
form1 <- createModelFormula(targetVar, xVars)
model1 <- lm(form1, AutoTrain)
summary(model1)
AutoTest$'mpg_hat1' <- predict(model1,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat1)
# Try removing horsepower.
xVars <- xVars[xVars!='horsepower']
form2 <- createModelFormula(targetVar, xVars)
model2 <- lm(form2, AutoTrain)
summary(model2)
AutoTest$'mpg_hat2' <- predict(model2,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat2)
# Displacement becomes insignificant. Try removing it.
xVars <- xVars[xVars!='displacement']
form3 <- createModelFormula(targetVar, xVars)
model3 <- lm(form3, AutoTrain)
summary(model3)
AutoTest$'mpg_hat3' <- predict(model3,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat3)
# R-squared went up slightly.
# Going back to model 2. However, I forgot to replace the NA horsepower values.
AutoTrain[is.na(AutoTrain$horsepower),]$horsepower <- mean(newAutoData$horsepower, na.rm = TRUE)
AutoTest[is.na(AutoTest$horsepower),]$horsepower <- mean(newAutoData$horsepower, na.rm = TRUE)
xVars <- c('year', 'origin', 'displacement','horsepower', 'weight')
form4 <- createModelFormula(targetVar, xVars)
model4 <- lm(form4, AutoTrain)
summary(model4)
AutoTest$'mpg_hat4' <- predict(model4,AutoTest)
rsq(AutoTest$mpg,AutoTest$mpg_hat4)
# Replacing the horsepower values with the mean of the data does not seem to affect the results much
# unsurprisingly. But it does lower the significance of displacement and horsepower a bit.
# The model3 result still has the highest R-Squared.
rsq(AutoTest$mpg,AutoTest$mpg_hat3)
# Best R-Squared: 0.8101151 in model3.
ggplot(newAutoData) + geom_point(aes(x=year, y = cylinders), position = "jitter")
corrMatrix
url <- 'http://www.umass.edu/statdata/statdata/data/lowbwt.xls'
library(gdata)
lbw <- read.xls(url)
names(lbw) <- tolower(names(lbw))
head(lbw)
lbw <- within(lbw, {
## race relabeling
race.cat <- factor(race, levels = 1:3, labels = c("White","Black","Other"))
## ftv (frequency of visit) relabeling
ftv.cat <- cut(ftv, breaks = c(-Inf, 0, 2, Inf), labels = c("None","Normal","Many"))
ftv.cat <- relevel(ftv.cat, ref = "Normal")
## ptl
preterm <- factor(ptl >= 1, levels = c(F,T), labels = c("0","1+"))
})
lbw
head(lbw)
formulaStr <- 'bwt ~ age + lwt + race.cat + smoke + preterm + ht + ui + ftv.cat'
formula <- as.formula(formulaStr)
lm.full <- lm(formula, data = lbw)
lm.null <- lm(bwt ~ 1, data = lbw)
summary(lm.full)
summary(lm.null)
plot(lm.full)
summary(lm.full)
plot(lm.full)
alpha <- .01
summary(lm.full)
tValues <- summary(lm.full)$coefficients[,4]
tValues <- sort(tValues, decreasing = TRUE)
varToDrop <- names(tValues[1])
varToDrop
dropVarFromFormula <- function(formulaStr, dropVar){
return(as.formula(paste0(formulaStr, ' - ', dropVar)))
}
newModelFormula <- dropVarFromFormula(formulaStr, dropVar = varToDrop)
formulaStr
newModelFormula
newModel <- lm(newModel, data = lbw)
newModel <- lm(newModelFormula, data = lbw)
summary(newModel)
?drop1
?update
drop1(update(lm.full, ~ . -age), test = "F")
drop1(update(lm.full, ~ . -age -ftv.cat), test = "F")
summary(update(lm.full, ~ . -age -ftv.cat -preterm))
?fastbw
library(class)
library(MASS)
library(Hmisc)
library(klaR)
library(e1071)
library(kknn)
library(rpart)
library(boost)
library(mvtnorm)
library(multinomRob)
library(lars)
library(stats)
library(leaps)
install.packages('class','MASS')
install.packages("class", "MASS")
library(class)
library(MASS)
library(Hmisc)
install.packages('Hmisc', 'klaR')
,na.strings=c(""))
,na.strings=c(""))
data <- read.csv('train.csv', header= TRUE,na.strings=c(""))
data
?AIC
names(data)
XVars <- names(data)
targetVar <- 'Survived'
XVars <- names(data[-'Survived'])
XVars <- names(data)
XVars
BackwardsSelection(5)
BackwardsSelection <- function(threshold) {
return 'hello'
}
?drop1
?drop1
newModel
drop1(newModel)
drop1(newModel)
drop1(newModel)
drop1(newModel)
drop1(newModel)
drop1(newModel)
drop1(newModel)
tValues <- summary(lm.full)$coefficients[,4]
tValues
tValues <- sort(tValues, decreasing = TRUE)
varToDrop <- names(tValues[1])
varToDrop
drop1(newModel, 'race.cat')
dropVarFromFormula <- function(formulaStr, dropVar){
return(as.formula(paste0(formulaStr, ' - ', dropVar)))
}
?drop1
XVars <- names(data)
targetVar <- 'Survived'
XVars <- XVars[XVars != 'Survived']
XVars <- XVars[XVars != targetVar]
XVars
XVars <- XVars[XVars != targetVar, 'PassengerId']
XVars <- XVars[XVars != 'PassengerId']
trainPct = .8
testPct = 1-trainPct
library('caret')
data$Survived
inTrain <- createDataPartition(y = data$Survived, p = trainPct, list = FALSE)
TitanicTrain <- data[inTrain,]
TitanicTest <- data[-inTrain,]
form <- createModelFormula(targetVar, XVars)
lm(TitanicTrain, form)
lm(form, TitanicTrain)
model <- lm(form, TitanicTrain)
summary(model)
XVars <- XVars[XVars != 'PassengerId' || 'Name' || 'Cabin']
trainPct = .8
testPct = 1-trainPct
library('caret')
inTrain <- createDataPartition(y = data$Survived, p = trainPct, list = FALSE)
TitanicTrain <- data[inTrain,]
TitanicTest <- data[-inTrain,]
form <- createModelFormula(targetVar, XVars)
model <- lm(form, TitanicTrain)
summary(model)
XVars <- XVars[XVars != 'PassengerId' || 'Name' || 'Cabin' || 'Ticket']
trainPct = .8
testPct = 1-trainPct
library('caret')
inTrain <- createDataPartition(y = data$Survived, p = trainPct, list = FALSE)
TitanicTrain <- data[inTrain,]
TitanicTest <- data[-inTrain,]
form <- createModelFormula(targetVar, XVars)
model <- lm(form, TitanicTrain)
summary(model)
XVars <- XVars[XVars != 'PassengerId' || 'Name' || 'Cabin' || 'Ticket']
XVars
XVars <- XVars[XVars != 'PassengerId' || 'Name' || "Cabin" || 'Ticket']
XVars
XVars <- XVars[XVars != ('PassengerId' || 'Name' || "Cabin" || 'Ticket')]
XVars <- c('Pclass', 'Sex', 'Age', 'SibSp', 'Parch','Fare','Embarked')
trainPct = .8
testPct = 1-trainPct
library('caret')
inTrain <- createDataPartition(y = data$Survived, p = trainPct, list = FALSE)
TitanicTrain <- data[inTrain,]
TitanicTest <- data[-inTrain,]
form <- createModelFormula(targetVar, XVars)
model <- lm(form, TitanicTrain)
summary(model)
?add1
add1(model, scope = createModelFormula(XVars))
form <- createModelFormula(targetVar, XVars)
form
add1(model, ~ ., test = "F")
form
add1(model, Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(model, scope = Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(model, scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
modelNull <- lm('Survived ~')
modelNull <- lm(Survived ~ 1, data)
modelNull
add1(modelNull, scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1((modelNull ~ . +Pclass), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1((modelNull ~ . +Pclass), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull ~ . +Pclass), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull, ~ . +Pclass), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull, ~ . +Pclass +Sex), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull, ~ . +Pclass +Sex +Age), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull, ~ . +Pclass +Sex +SibSp), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull, ~ . +Pclass +Sex +Age), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
add1(update(modelNull, ~ . +Pclass +Sex +SibSp +Age), scope = ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , test = "F")
finalFwd <- update(modelNull, ~ . +Pclass +Sex +SibSp +Age)
finalFwd
summary(finalFwd)
TitanicTest[,'yhat'] <- predict(finalFwd, TitanicTest)
rsq(TitanicTest$Survived, TitanicTest$yhat)
View(TitanicTest)
which(is.na(data))
data[which(is.na(data))]
data[which(is.na(data)),]
data <- data[data != data[which(is.na(data)),]
ad
data <- data[data != data[which(is.na(data)),]]
data[is.na(data)] <- 0
is.na(data)
summary(model)
drop1(update(lm.full, ~ . -Fare), test = "F")
drop1(update(model, ~ . -Fare), test = "F")
drop1(update(model, ~ . -Fare -Parch), test = "F")
finalBwd <- drop1(update(model, ~ . -Fare -Parch), test = "F")
finalBwd
summary(finalBwd)
finalFwd
finalBwd
getwd()
setwd('~/Code/csp571/HR-Analytics')
getwd()
ls()
rm(list = ls())
path(0)
path()
list.files()
HRAnalytics.R
file.edit('HRAnalytics.R')
install.packages('gsheet')
library(gsheet)
origData <- as.data.frame(gsheet2tbl('https://docs.google.com/spreadsheets/d/19-Zv4KiYXw20Dmtj97BfcE6Cri4paA2lnALa6H3w7pc/edit#gid=205206323'))
employeeID <- c(1:dim(origData)[1])
HRData<- as.data.frame(cbind(employeeID, origData))
colnames(HRData)[1] <- c('employee_ID')
head(HRData)
dim(origData)
?dim
